{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KassandraCruit-Salzb\\\\code\\\\solar-calc3\\\\src\\\\pages\\\\Good.js\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Card from \"../components/Card\";\nimport Alert from \"../components/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Good extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      image: \"\",\n      match: false,\n      matchCount: 0\n    };\n\n    this.handleBtnClick = event => {\n      // Get the data-value of the clicked button\n      const btnType = event.target.attributes.getNamedItem(\"data-value\").value; // Clone this.state to the newState object\n      // We'll modify this object and use it to set our component's state\n\n      const newState = { ...this.state\n      };\n\n      if (btnType === \"pick\") {\n        // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n        newState.match = 1 === Math.floor(Math.random() * 5) + 1; // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n\n        newState.matchCount = newState.match ? newState.matchCount + 1 : newState.matchCount;\n      } else {\n        // If we thumbs down'ed the dog, we haven't matched with it\n        newState.match = false;\n      } // Replace our component's state with newState, load the next dog image\n\n\n      this.setState(newState);\n      this.loadsolarResults();\n    };\n\n    this.load = () => {\n      API.getRandomDog().then(res => this.setState({\n        image: res.data.message\n      })).catch(err => console.log(err));\n    };\n  }\n\n  // When the component mounts, load the next dog to be displayed\n  componentDidMount() {\n    this.loadNextDog();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Make New Friends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-center\",\n        children: \"Thumbs up on any pups you'd like to meet!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: [\"Made friends with \", this.state.matchCount, \" pups so far!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        style: {\n          opacity: this.state.match ? 1 : 0\n        },\n        type: \"success\",\n        children: \"Yay! That Pup Liked You Too!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Discover;","map":{"version":3,"sources":["C:/Users/KassandraCruit-Salzb/code/solar-calc3/src/pages/Good.js"],"names":["React","Component","API","Card","Alert","Good","state","image","match","matchCount","handleBtnClick","event","btnType","target","attributes","getNamedItem","value","newState","Math","floor","random","setState","loadsolarResults","load","getRandomDog","then","res","data","message","catch","err","console","log","componentDidMount","loadNextDog","render","opacity","Discover"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BK,KAD2B,GACnB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,KAFD;AAGNC,MAAAA,UAAU,EAAE;AAHN,KADmB;;AAAA,SAY3BC,cAZ2B,GAYVC,KAAK,IAAI;AACxB;AACA,YAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBC,YAAxB,CAAqC,YAArC,EAAmDC,KAAnE,CAFwB,CAGxB;AACA;;AACA,YAAMC,QAAQ,GAAG,EAAE,GAAG,KAAKX;AAAV,OAAjB;;AAEA,UAAIM,OAAO,KAAK,MAAhB,EAAwB;AACtB;AACAK,QAAAA,QAAQ,CAACT,KAAT,GAAiB,MAAMU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAvD,CAFsB,CAItB;;AACAH,QAAAA,QAAQ,CAACR,UAAT,GAAsBQ,QAAQ,CAACT,KAAT,GAClBS,QAAQ,CAACR,UAAT,GAAsB,CADJ,GAElBQ,QAAQ,CAACR,UAFb;AAGD,OARD,MAQO;AACL;AACAQ,QAAAA,QAAQ,CAACT,KAAT,GAAiB,KAAjB;AACD,OAlBuB,CAmBxB;;;AACA,WAAKa,QAAL,CAAcJ,QAAd;AACA,WAAKK,gBAAL;AACD,KAlC0B;;AAAA,SAoC3BC,IApC2B,GAoCpB,MAAM;AACXrB,MAAAA,GAAG,CAACsB,YAAJ,GACGC,IADH,CACQC,GAAG,IACP,KAAKL,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEmB,GAAG,CAACC,IAAJ,CAASC;AADJ,OAAd,CAFJ,EAMGC,KANH,CAMSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANhB;AAOD,KA5C0B;AAAA;;AAO3B;AACAG,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,WAAL;AACD;;AAoCDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAK7B,KAAL,CAAWC,KAAxB;AAA+B,QAAA,cAAc,EAAE,KAAKG;AAApD;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,yCACqB,KAAKJ,KAAL,CAAWG,UADhC;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eASE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAE2B,UAAAA,OAAO,EAAE,KAAK9B,KAAL,CAAWE,KAAX,GAAmB,CAAnB,GAAuB;AAAlC,SAAd;AAAqD,QAAA,IAAI,EAAC,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA9D0B;;AAiE7B,eAAe6B,QAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Card from \"../components/Card\";\r\nimport Alert from \"../components/Alert\";\r\n\r\nclass Good extends Component {\r\n  state = {\r\n    image: \"\",\r\n    match: false,\r\n    matchCount: 0\r\n  };\r\n\r\n  // When the component mounts, load the next dog to be displayed\r\n  componentDidMount() {\r\n    this.loadNextDog();\r\n  }\r\n\r\n  handleBtnClick = event => {\r\n    // Get the data-value of the clicked button\r\n    const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\r\n    // Clone this.state to the newState object\r\n    // We'll modify this object and use it to set our component's state\r\n    const newState = { ...this.state };\r\n\r\n    if (btnType === \"pick\") {\r\n      // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\r\n      newState.match = 1 === Math.floor(Math.random() * 5) + 1;\r\n\r\n      // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\r\n      newState.matchCount = newState.match\r\n        ? newState.matchCount + 1\r\n        : newState.matchCount;\r\n    } else {\r\n      // If we thumbs down'ed the dog, we haven't matched with it\r\n      newState.match = false;\r\n    }\r\n    // Replace our component's state with newState, load the next dog image\r\n    this.setState(newState);\r\n    this.loadsolarResults();\r\n  };\r\n\r\n  load = () => {\r\n    API.getRandomDog()\r\n      .then(res =>\r\n        this.setState({\r\n          image: res.data.message\r\n        })\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"text-center\">Make New Friends</h1>\r\n        <h3 className=\"text-center\">\r\n          Thumbs up on any pups you'd like to meet!\r\n        </h3>\r\n        <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\r\n        <h1 className=\"text-center\">\r\n          Made friends with {this.state.matchCount} pups so far!\r\n        </h1>\r\n        <Alert style={{ opacity: this.state.match ? 1 : 0 }} type=\"success\">\r\n          Yay! That Pup Liked You Too!!!\r\n        </Alert>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Discover;\r\n"]},"metadata":{},"sourceType":"module"}