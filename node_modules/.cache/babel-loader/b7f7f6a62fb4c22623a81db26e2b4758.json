{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KassandraCruit-Salzb\\\\code\\\\solar-calc3\\\\src\\\\pages\\\\Bad.js\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Card from \"../components/Card\";\nimport Alert from \"../components/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Bad extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      image: \"\",\n      match: false,\n      matchCount: 0\n    };\n\n    this.handleBtnClick = event => {\n      // Get the data-value of the clicked button\n      const btnType = event.target.attributes.getNamedItem(\"data-value\").value; // Clone this.state to the newState object\n      // We'll modify this object and use it to set our component's state\n\n      const newState = { ...this.state\n      };\n\n      if (btnType === \"pick\") {\n        // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n        newState.match = 1 === Math.floor(Math.random() * 5) + 1; // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n\n        newState.matchCount = newState.match ? newState.matchCount + 1 : newState.matchCount;\n      } else {\n        // If we thumbs down'ed the dog, we haven't matched with it\n        newState.match = false;\n      } // Replace our component's state with newState, load the next dog image\n\n\n      this.setState(newState);\n      this.loadSolarResults();\n    };\n\n    this.loadSolarResults = () => {// API.getRandomDog()\n      //   .then(res =>\n      //     this.setState({\n      //       image: res.data.message\n      //     })\n      //   )\n      //   .catch(err => console.log(err));\n    };\n  }\n\n  // When the component mounts, load the next dog to be displayed\n  componentDidMount() {\n    this.loadSolarResults();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Bad;","map":{"version":3,"sources":["C:/Users/KassandraCruit-Salzb/code/solar-calc3/src/pages/Bad.js"],"names":["React","Component","API","Card","Alert","Bad","state","image","match","matchCount","handleBtnClick","event","btnType","target","attributes","getNamedItem","value","newState","Math","floor","random","setState","loadSolarResults","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBK,KADwB,GAChB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,KAFD;AAGNC,MAAAA,UAAU,EAAE;AAHN,KADgB;;AAAA,SAY1BC,cAZ0B,GAYTC,KAAK,IAAI;AACxB;AACA,YAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBC,YAAxB,CAAqC,YAArC,EAAmDC,KAAnE,CAFwB,CAGxB;AACA;;AACA,YAAMC,QAAQ,GAAG,EAAE,GAAG,KAAKX;AAAV,OAAjB;;AAEA,UAAIM,OAAO,KAAK,MAAhB,EAAwB;AACtB;AACAK,QAAAA,QAAQ,CAACT,KAAT,GAAiB,MAAMU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAvD,CAFsB,CAItB;;AACAH,QAAAA,QAAQ,CAACR,UAAT,GAAsBQ,QAAQ,CAACT,KAAT,GAClBS,QAAQ,CAACR,UAAT,GAAsB,CADJ,GAElBQ,QAAQ,CAACR,UAFb;AAGD,OARD,MAQO;AACL;AACAQ,QAAAA,QAAQ,CAACT,KAAT,GAAiB,KAAjB;AACD,OAlBuB,CAmBxB;;;AACA,WAAKa,QAAL,CAAcJ,QAAd;AACA,WAAKK,gBAAL;AACD,KAlCyB;;AAAA,SAoC1BA,gBApC0B,GAoCP,MAAM,CACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA5CyB;AAAA;;AAO3B;AACAC,EAAAA,iBAAiB,GAAG;AACjB,SAAKD,gBAAL;AACD;;AAoCDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AApDyB;;AAuD5B,eAAenB,GAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Card from \"../components/Card\";\r\nimport Alert from \"../components/Alert\";\r\n\r\nclass Bad extends Component {\r\n    state = {\r\n      image: \"\",\r\n      match: false,\r\n      matchCount: 0\r\n    };\r\n\r\n // When the component mounts, load the next dog to be displayed\r\n componentDidMount() {\r\n    this.loadSolarResults();\r\n  }\r\n\r\n  handleBtnClick = event => {\r\n    // Get the data-value of the clicked button\r\n    const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\r\n    // Clone this.state to the newState object\r\n    // We'll modify this object and use it to set our component's state\r\n    const newState = { ...this.state };\r\n\r\n    if (btnType === \"pick\") {\r\n      // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\r\n      newState.match = 1 === Math.floor(Math.random() * 5) + 1;\r\n\r\n      // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\r\n      newState.matchCount = newState.match\r\n        ? newState.matchCount + 1\r\n        : newState.matchCount;\r\n    } else {\r\n      // If we thumbs down'ed the dog, we haven't matched with it\r\n      newState.match = false;\r\n    }\r\n    // Replace our component's state with newState, load the next dog image\r\n    this.setState(newState);\r\n    this.loadSolarResults();\r\n  };\r\n\r\n  loadSolarResults = () => {\r\n    // API.getRandomDog()\r\n    //   .then(res =>\r\n    //     this.setState({\r\n    //       image: res.data.message\r\n    //     })\r\n    //   )\r\n    //   .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bad;\r\n"]},"metadata":{},"sourceType":"module"}